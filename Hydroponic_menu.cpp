/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "Hydroponic_menu.h"

// Global variable declarations

const PROGMEM  ConnectorLocalInfo applicationInfo = { "Hydroponic", "ccb29002-7bf6-407b-bb5a-105430e55662" };
LiquidCrystal lcd(0, 1, 2, 4, 5, 6, 7);
LiquidCrystalRenderer renderer(lcd, 16, 2);

// Global Menu Item declarations

const PROGMEM AnyMenuInfo minfoSaveSettings = { "Save Settings", 46, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSaveSettings(&minfoSaveSettings, NULL);
const PROGMEM AnyMenuInfo minfoReboot = { "Reboot", 45, 0xffff, 0, onReboot };
ActionMenuItem menuReboot(&minfoReboot, &menuSaveSettings);
const char enumStrWifiMode_0[] PROGMEM = "Client";
const char enumStrWifiMode_1[] PROGMEM = "AP";
const char* const enumStrWifiMode[] PROGMEM  = { enumStrWifiMode_0, enumStrWifiMode_1 };
const PROGMEM EnumMenuInfo minfoWifiMode = { "Wifi Mode", 28, 111, 1, NO_CALLBACK, enumStrWifiMode };
EnumMenuItem menuWifiMode(&minfoWifiMode, 0, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnPasswordRtCall, textItemRenderFn, "Password", 65, NO_CALLBACK)
TextMenuItem menuPassword(fnPasswordRtCall, 12, 20, &menuWifiMode);
RENDERING_CALLBACK_NAME_INVOKE(fnSSIDRtCall, textItemRenderFn, "SSID", 85, NO_CALLBACK)
TextMenuItem menuSSID(fnSSIDRtCall, 11, 20, &menuPassword);
RENDERING_CALLBACK_NAME_INVOKE(fnIPRtCall, ipAddressRenderFn, "IP", -1, NO_CALLBACK)
IpAddressMenuItem menuIP(fnIPRtCall, 27, &menuSSID);
RENDERING_CALLBACK_NAME_INVOKE(fnWifiSettingsRtCall, backSubItemRenderFn, "Wifi Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoWifiSettings = { "Wifi Settings", 10, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackWifiSettings(fnWifiSettingsRtCall, &menuIP);
SubMenuItem menuWifiSettings(&minfoWifiSettings, &menuBackWifiSettings, &menuReboot);
const PROGMEM AnalogMenuInfo minfoTestTime = { "Test Time", 43, 122, 23, NO_CALLBACK, 0, 1, "hr" };
AnalogMenuItem menuTestTime(&minfoTestTime, 0, NULL);
const PROGMEM AnalogMenuInfo minfoTestDuration = { "Test Duration", 34, 119, 30, NO_CALLBACK, 0, 1, "min" };
AnalogMenuItem menuTestDuration(&minfoTestDuration, 0, &menuTestTime);
const PROGMEM AnalogMenuInfo minfoMixDuration = { "Mix Duration", 33, 117, 60, NO_CALLBACK, 0, 1, "min" };
AnalogMenuItem menuMixDuration(&minfoMixDuration, 0, &menuTestDuration);
const PROGMEM AnalogMenuInfo minfoEndTime = { "End Time", 21, 37, 23, NO_CALLBACK, 0, 1, "hr" };
AnalogMenuItem menuEndTime(&minfoEndTime, 0, &menuMixDuration);
const PROGMEM AnalogMenuInfo minfoStartTime = { "Start Time", 20, 43, 23, NO_CALLBACK, 0, 1, "hr" };
AnalogMenuItem menuStartTime(&minfoStartTime, 0, &menuEndTime);
const PROGMEM AnalogMenuInfo minfoIntervalMin = { "Interval (min)", 19, 41, 60, NO_CALLBACK, 0, 1, "min" };
AnalogMenuItem menuIntervalMin(&minfoIntervalMin, 0, &menuStartTime);
const PROGMEM AnalogMenuInfo minfoRunMin = { "Run (min)", 18, 39, 60, NO_CALLBACK, 0, 1, "min" };
AnalogMenuItem menuRunMin(&minfoRunMin, 0, &menuIntervalMin);
const PROGMEM BooleanMenuInfo minfoAuto = { "Auto", 42, 124, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuAuto(&minfoAuto, false, &menuRunMin);
RENDERING_CALLBACK_NAME_INVOKE(fnRunningTimeRtCall, backSubItemRenderFn, "Running Time", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoRunningTime = { "Running Time", 17, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackRunningTime(fnRunningTimeRtCall, &menuAuto);
SubMenuItem menuRunningTime(&minfoRunningTime, &menuBackRunningTime, &menuWifiSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnCurrentTimeRtCall, timeItemRenderFn, "Current Time", -1, NO_CALLBACK)
TimeFormattedMenuItem menuCurrentTime(fnCurrentTimeRtCall, 26, (MultiEditWireType)2, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnTimeRtCall, backSubItemRenderFn, "Time", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoTime = { "Time", 13, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTime(fnTimeRtCall, &menuCurrentTime);
SubMenuItem menuTime(&minfoTime, &menuBackTime, &menuRunningTime);
const PROGMEM AnyMenuInfo minfoOK = { "OK", 50, 0xffff, 0, calecph };
ActionMenuItem menuOK(&minfoOK, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnCalStatusRtCall, textItemRenderFn, "Calibration", -1, NO_CALLBACK)
TextMenuItem menuCalStatus(fnCalStatusRtCall, 49, 16, &menuOK);
const char enumStroptCall_0[] PROGMEM = "EC";
const char enumStroptCall_1[] PROGMEM = "pH";
const char* const enumStroptCall[] PROGMEM  = { enumStroptCall_0, enumStroptCall_1 };
const PROGMEM EnumMenuInfo minfooptCall = { "Select Sensor", 51, 0xffff, 1, NO_CALLBACK, enumStroptCall };
EnumMenuItem menuoptCall(&minfooptCall, 0, &menuCalStatus);
RENDERING_CALLBACK_NAME_INVOKE(fnCalibrateRtCall, backSubItemRenderFn, "Calibrate", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoCalibrate = { "Calibrate", 47, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackCalibrate(fnCalibrateRtCall, &menuoptCall);
SubMenuItem menuCalibrate(&minfoCalibrate, &menuBackCalibrate, NULL);
const PROGMEM AnalogMenuInfo minfoMinimumEC = { "Minimum", 24, 107, 100, NO_CALLBACK, 0, 10, "mscm" };
AnalogMenuItem menuMinimumEC(&minfoMinimumEC, 0, &menuCalibrate);
const PROGMEM AnalogMenuInfo minfoTargetEC = { "Target", 25, 109, 100, NO_CALLBACK, 0, 10, "mscm" };
AnalogMenuItem menuTargetEC(&minfoTargetEC, 0, &menuMinimumEC);
RENDERING_CALLBACK_NAME_INVOKE(fnECRtCall, backSubItemRenderFn, "EC", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoEC = { "EC", 23, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackEC(fnECRtCall, &menuTargetEC);
SubMenuItem menuEC(&minfoEC, &menuBackEC, &menuTime);
const PROGMEM AnyMenuInfo minfoRunDosing = { "Run Dosing", 37, 0xffff, 0, runDose };
ActionMenuItem menuRunDosing(&minfoRunDosing, NULL);
const PROGMEM BooleanMenuInfo minfoAutoDose = { "Auto Dose", 38, 121, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuAutoDose(&minfoAutoDose, false, &menuRunDosing);
const PROGMEM AnalogMenuInfo minfoMlMin = { "ml min", 30, 115, 255, NO_CALLBACK, 0, 1, "ml" };
AnalogMenuItem menuMlMin(&minfoMlMin, 0, &menuAutoDose);
const PROGMEM AnalogMenuInfo minfoMl = { "ml", 29, 113, 100, NO_CALLBACK, 0, 1, "ml" };
AnalogMenuItem menuMl(&minfoMl, 0, &menuMlMin);
RENDERING_CALLBACK_NAME_INVOKE(fnDosingRtCall, backSubItemRenderFn, "Dosing", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoDosing = { "Dosing", 9, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackDosing(fnDosingRtCall, &menuMl);
SubMenuItem menuDosing(&minfoDosing, &menuBackDosing, &menuEC);
const PROGMEM AnyMenuInfo minfoStopAll = { "Stop All", 41, 0xffff, 0, onStopAll };
ActionMenuItem menuStopAll(&minfoStopAll, &menuDosing);
const PROGMEM AnyMenuInfo minfoMixNow = { "Run Mix", 35, 0xffff, 0, runMix };
ActionMenuItem menuMixNow(&minfoMixNow, &menuStopAll);
const PROGMEM AnyMenuInfo minfoTestNow = { "Run Test", 39, 0xffff, 0, runTest };
ActionMenuItem menuTestNow(&minfoTestNow, &menuMixNow);
const PROGMEM AnyMenuInfo minfoPumping = { "Run Pump", 40, 0xffff, 0, RunPump };
ActionMenuItem menuPumping(&minfoPumping, &menuTestNow);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuPumping);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const PROGMEM AnalogMenuInfo minfotemperature = { "Temperature", 3, 0xffff, 100, NO_CALLBACK, 0, 1, "C" };
AnalogMenuItem menutemperature(&minfotemperature, 0, &menuSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnPHECRtCall, textItemRenderFn, "pH", -1, NO_CALLBACK)
TextMenuItem menuPHEC(fnPHECRtCall, 1, 16, &menutemperature);
RENDERING_CALLBACK_NAME_INVOKE(fnstatusRtCall, textItemRenderFn, "Hello", -1, NO_CALLBACK)
TextMenuItem menustatus(fnstatusRtCall, 44, 16, &menuPHEC);

// Set up code

void setupMenu() {
    menuOK.setReadOnly(true);
    menuPHEC.setReadOnly(true);
    menuSettings.setReadOnly(true);
    menuCalStatus.setReadOnly(true);
    menutemperature.setReadOnly(true);
    menuWifiSettings.setReadOnly(true);
    menustatus.setReadOnly(true);

    Wire.begin();
    lcd.setIoAbstraction(ioFrom8574(0x27, 0xff, &Wire));
    lcd.begin(16, 2);
    lcd.configureBacklightPin(3);
    lcd.backlight();
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForUpDownOk(&renderer, &menustatus, 18, 5, 19);
}

